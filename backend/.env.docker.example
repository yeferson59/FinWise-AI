# =============================================================================
# Docker Environment Configuration Example
# =============================================================================
# This file contains example environment variables for running the FinWise-AI
# backend with Docker or Docker Compose.
#
# USAGE:
#   1. Copy this file to .env: cp .env.docker.example .env
#   2. Fill in the required values (marked with YOUR_VALUE_HERE)
#   3. Run with Docker: docker run --env-file .env ...
#      Or with Docker Compose: docker-compose up -d
#
# SECURITY WARNING:
#   - Never commit the .env file to version control
#   - Use strong, randomly generated values for production
#   - Store production secrets in a secrets manager (AWS Secrets Manager, etc.)
# =============================================================================

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
APP_NAME=FinWise API
PORT=8000
ENVIRONMENT=production
VERSION=1.0.0
PREFIX_API=/api/v1

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# SQLite (Development/Simple Deployments)
DATABASE_URL=sqlite:///database.db

# PostgreSQL (Recommended for Production)
# Uncomment and configure when using the postgres service in docker-compose.yml
# DATABASE_URL=postgresql://finwise:YOUR_DB_PASSWORD_HERE@postgres:5432/finwise
# DB_PASSWORD=YOUR_SECURE_DB_PASSWORD_HERE

# =============================================================================
# SECURITY & AUTHENTICATION (REQUIRED)
# =============================================================================
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
# IMPORTANT: This MUST be at least 32 characters and randomly generated
SECRET_KEY=YOUR_SECRET_KEY_HERE

# JWT Configuration
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# =============================================================================
# AI/LLM CONFIGURATION (REQUIRED)
# =============================================================================
# OpenRouter API Key (get from https://openrouter.ai/)
# Format: sk-or-v1-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
OPENAI_API_KEY=YOUR_OPENROUTER_API_KEY_HERE

# AI Model Configuration
# Available models:
# - nvidia/llama-3.3-nemotron-70b-instruct (default, high quality)
# - meta-llama/llama-3.3-70b-instruct
# - openai/gpt-4-turbo
# - anthropic/claude-3-opus
MODELS=nvidia/llama-3.3-nemotron-70b-instruct

# Model Parameters
TEMPERATURE=0.2
TOP_P=0.3

# =============================================================================
# FILE STORAGE
# =============================================================================
# Storage Type: 'local' or 's3'
FILE_STORAGE_TYPE=local
LOCAL_STORAGE_PATH=uploads

# AWS S3 Configuration (Optional - for production)
# Uncomment and configure when using S3 storage
# S3_BUCKET=your-bucket-name
# S3_REGION=us-east-1
# S3_ACCESS_KEY=your-access-key
# S3_SECRET_KEY=your-secret-key
# S3_ENDPOINT=https://s3.amazonaws.com

# =============================================================================
# DOCKER-SPECIFIC CONFIGURATION
# =============================================================================
# These are used by docker-compose.yml

# PostgreSQL password (if using postgres service)
# DB_PASSWORD=your-secure-password-change-me

# pgAdmin password (if using pgadmin service)
# PGADMIN_PASSWORD=admin-password-change-me

# =============================================================================
# QUICK START GUIDE
# =============================================================================
#
# 1. Generate a secure SECRET_KEY:
#    python -c "import secrets; print(secrets.token_urlsafe(32))"
#
# 2. Get an OpenRouter API key:
#    Visit https://openrouter.ai/ and sign up for an account
#
# 3. Copy this file to .env and fill in the values:
#    cp .env.docker.example .env
#    # Edit .env with your favorite editor
#
# 4. Start with Docker Compose:
#    docker-compose up -d
#
# 5. Check if it's running:
#    curl http://localhost:8000/api/v1/health/
#
# 6. View logs:
#    docker-compose logs -f backend
#
# =============================================================================
# PRODUCTION CHECKLIST
# =============================================================================
#
# Before deploying to production, ensure:
#
# ✅ SECRET_KEY is randomly generated (32+ characters)
# ✅ OPENAI_API_KEY is valid and has sufficient credits
# ✅ DATABASE_URL points to PostgreSQL (not SQLite)
# ✅ DB_PASSWORD is strong and secure
# ✅ FILE_STORAGE_TYPE is set to 's3' with proper credentials
# ✅ ENVIRONMENT is set to 'production'
# ✅ All secrets are stored in a secrets manager
# ✅ Container resource limits are configured
# ✅ HTTPS/TLS is enabled via reverse proxy
# ✅ Monitoring and logging are set up
# ✅ Backups are configured for database and uploads
#
# =============================================================================
